{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DataStructures Demo This is a demo for using MKDocs Getting Started Data Structures is an important concept for all IT professionals. Concepts There are many data structures like LinkedLists, Stacks,Queues,Trees etc. Stacks Stacks work on LIFO (Last in First out principle)","title":"Home"},{"location":"#datastructures-demo","text":"This is a demo for using MKDocs","title":"DataStructures Demo"},{"location":"#getting-started","text":"Data Structures is an important concept for all IT professionals.","title":"Getting Started"},{"location":"#concepts","text":"There are many data structures like LinkedLists, Stacks,Queues,Trees etc.","title":"Concepts"},{"location":"#stacks","text":"Stacks work on LIFO (Last in First out principle)","title":"Stacks"},{"location":"About/","text":"About Data Structures is an exciting field About We discuss Data Structures here","title":"About"},{"location":"About/#about","text":"Data Structures is an exciting field","title":"About"},{"location":"About/#about_1","text":"We discuss Data Structures here","title":"About"},{"location":"stack/","text":"Stack module Stack Source code in my-package/stack.py class Stack : def __init__ ( self ): ''' Objective: To initialize data memebers of the Stack Input Parameter: self(implicit parameter) -object of the type Stack Return Value: None ''' self . values = list () def push ( self , element ): ''' Objective: To put an elemenet on top the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: None ''' self . values . append ( element ) def isempty ( self ): ''' Objective: To determine if the stack is empty Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: true if the stack is empty.else false ''' return len ( self . values ) == 0 def pop ( self ): ''' Objective: To remove an element from the top of a stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None ''' if ( not ( self . isempty ())): return self . values . pop () else : print ( 'Stack Underflow' ) return None def top ( self ): ''' Objective: To return the top of the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None ''' if ( not ( self . isempty ())): return self . values [ - 1 ] else : print ( 'Stack Empyty' ) return None def size ( self ): ''' Objective: To return the number of elements in the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: Number of elements in stack - numeric ''' return len ( self . values ) def __str__ ( self ): ''' Objective: To return the string representation of the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: string ''' stringRepr = '' for i in reversed ( self . values ): stringRepr += str ( i ) + ' \\t ' return stringRepr __init__ ( self ) special Objective: To initialize data memebers of the Stack Input Parameter: self(implicit parameter) -object of the type Stack Return Value: None Source code in my-package/stack.py def __init__ ( self ): ''' Objective: To initialize data memebers of the Stack Input Parameter: self(implicit parameter) -object of the type Stack Return Value: None ''' self . values = list () __str__ ( self ) special Objective: To return the string representation of the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: string Source code in my-package/stack.py def __str__ ( self ): ''' Objective: To return the string representation of the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: string ''' stringRepr = '' for i in reversed ( self . values ): stringRepr += str ( i ) + ' \\t ' return stringRepr isempty ( self ) Objective: To determine if the stack is empty Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: true if the stack is empty.else false Source code in my-package/stack.py def isempty ( self ): ''' Objective: To determine if the stack is empty Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: true if the stack is empty.else false ''' return len ( self . values ) == 0 pop ( self ) Objective: To remove an element from the top of a stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None Source code in my-package/stack.py def pop ( self ): ''' Objective: To remove an element from the top of a stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None ''' if ( not ( self . isempty ())): return self . values . pop () else : print ( 'Stack Underflow' ) return None push ( self , element ) Objective: To put an elemenet on top the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: None Source code in my-package/stack.py def push ( self , element ): ''' Objective: To put an elemenet on top the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: None ''' self . values . append ( element ) size ( self ) Objective: To return the number of elements in the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: Number of elements in stack - numeric Source code in my-package/stack.py def size ( self ): ''' Objective: To return the number of elements in the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: Number of elements in stack - numeric ''' return len ( self . values ) top ( self ) Objective: To return the top of the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None Source code in my-package/stack.py def top ( self ): ''' Objective: To return the top of the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None ''' if ( not ( self . isempty ())): return self . values [ - 1 ] else : print ( 'Stack Empyty' ) return None","title":"Stack"},{"location":"stack/#stack-module","text":"","title":"Stack module"},{"location":"stack/#my-package.stack.Stack","text":"Source code in my-package/stack.py class Stack : def __init__ ( self ): ''' Objective: To initialize data memebers of the Stack Input Parameter: self(implicit parameter) -object of the type Stack Return Value: None ''' self . values = list () def push ( self , element ): ''' Objective: To put an elemenet on top the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: None ''' self . values . append ( element ) def isempty ( self ): ''' Objective: To determine if the stack is empty Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: true if the stack is empty.else false ''' return len ( self . values ) == 0 def pop ( self ): ''' Objective: To remove an element from the top of a stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None ''' if ( not ( self . isempty ())): return self . values . pop () else : print ( 'Stack Underflow' ) return None def top ( self ): ''' Objective: To return the top of the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None ''' if ( not ( self . isempty ())): return self . values [ - 1 ] else : print ( 'Stack Empyty' ) return None def size ( self ): ''' Objective: To return the number of elements in the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: Number of elements in stack - numeric ''' return len ( self . values ) def __str__ ( self ): ''' Objective: To return the string representation of the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: string ''' stringRepr = '' for i in reversed ( self . values ): stringRepr += str ( i ) + ' \\t ' return stringRepr","title":"Stack"},{"location":"stack/#my-package.stack.Stack.__init__","text":"Objective: To initialize data memebers of the Stack Input Parameter: self(implicit parameter) -object of the type Stack Return Value: None Source code in my-package/stack.py def __init__ ( self ): ''' Objective: To initialize data memebers of the Stack Input Parameter: self(implicit parameter) -object of the type Stack Return Value: None ''' self . values = list ()","title":"__init__()"},{"location":"stack/#my-package.stack.Stack.__str__","text":"Objective: To return the string representation of the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: string Source code in my-package/stack.py def __str__ ( self ): ''' Objective: To return the string representation of the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: string ''' stringRepr = '' for i in reversed ( self . values ): stringRepr += str ( i ) + ' \\t ' return stringRepr","title":"__str__()"},{"location":"stack/#my-package.stack.Stack.isempty","text":"Objective: To determine if the stack is empty Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: true if the stack is empty.else false Source code in my-package/stack.py def isempty ( self ): ''' Objective: To determine if the stack is empty Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: true if the stack is empty.else false ''' return len ( self . values ) == 0","title":"isempty()"},{"location":"stack/#my-package.stack.Stack.pop","text":"Objective: To remove an element from the top of a stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None Source code in my-package/stack.py def pop ( self ): ''' Objective: To remove an element from the top of a stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None ''' if ( not ( self . isempty ())): return self . values . pop () else : print ( 'Stack Underflow' ) return None","title":"pop()"},{"location":"stack/#my-package.stack.Stack.push","text":"Objective: To put an elemenet on top the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: None Source code in my-package/stack.py def push ( self , element ): ''' Objective: To put an elemenet on top the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: None ''' self . values . append ( element )","title":"push()"},{"location":"stack/#my-package.stack.Stack.size","text":"Objective: To return the number of elements in the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: Number of elements in stack - numeric Source code in my-package/stack.py def size ( self ): ''' Objective: To return the number of elements in the stack. Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: Number of elements in stack - numeric ''' return len ( self . values )","title":"size()"},{"location":"stack/#my-package.stack.Stack.top","text":"Objective: To return the top of the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None Source code in my-package/stack.py def top ( self ): ''' Objective: To return the top of the stack Input Parameter: self(implicit parameter) -object of the type Stack element-value to be inserted Return Value: top element of the stack, if stack is not empty,else None ''' if ( not ( self . isempty ())): return self . values [ - 1 ] else : print ( 'Stack Empyty' ) return None","title":"top()"},{"location":"userguide/","text":"User Guide Usage Sample for MKdocs documentation.","title":"User Guide"},{"location":"userguide/#user-guide","text":"","title":"User Guide"},{"location":"userguide/#usage","text":"Sample for MKdocs documentation.","title":"Usage"}]}